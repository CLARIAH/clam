


user:
    1) secondary format ->  primary   
        label:
            "Secondary format (automatically converted)"
            "Secondary format (automatically converted to Primary Format)" (in case of multiple primaries)





FormatTemplate:
 - mimetype

 - languages
 - encodings
 - roles


Format:
    - encoding
    - role
    - language




Format class:
    - mimetype
    - list of maximally allowed encodings
    - list of maximally allowed languages
Format instance
    - encoding
    - language
    (anything else)

    metadata()  #print metadata definition (in a CLAM Simple MetaData format)

Format constructor parameters:
    - setextension=  
    - setfilename=   
    - byextension=   
    - byfilename=    
    - allowarchive   #allow archives, automaticall




    


ParameterConditions(*args)
    each args instanceof ParameterCondition

ParameterCondition(parameter_id, parameter_value, Format)

class IfEquals(ParameterCondition), IfNotEquals(ParameterCondition), Else(ParameterCondition), IfGreaterThan(ParameterCondition), IfLessThan(ParameterCondition), IfGreaterEqualThan(ParameterCondition), IfLessEqualThan(ParameterCondition)



Profile('tokonly','Tokenisation only',
    InputTemplate(PlainTextFormat, 'Plain Text Tokeniser Input', encoding='utf-8',language='nld',setextension='$language.$encoding.txt',convertors=[ArchiveConvertor, WordConvertor,EncodingConvertor]),   #format, list of formats or formattemplate
    ParameterConditions(IfEquals('tok', 'yes', OutputTemplate(TokenizedTextFormat,encoding='utf-8',language='nld',byextension='$language.$encoding.tok', viewers=[])), Else()),  #format or list of formats
    mincardinality=1, maxcardinality=9999
)

<profile mincardinality="1" maxcardinality="9999">
    <input>
        <inputtemplate format="PlainTextFormat" mimetype="text/plain" label="Plain Text Tokeniser Input">
            <!-- requirements -->
            <meta id="encoding">utf-8</meta>
            <nometa id="lineendings">dos</nometa>
            <metaselect id="language">
                <value>nld</value>
                <value>eng</value>
            </metaselect>
            <convertable>
                <format...>
            </convertable>
        </inputtemplate>
    </input>
    <output>
        <parametercondition>
         <if>
            <equals parameter="tok">yes</equals>
         </if>
         <then>
            <outputtemplate format="TokenizedTextFormat" mimetype="text/plain" label="Tokeniser Output" setextension=".tok" metacopy="yes">
                <!-- generated -->
                <meta key="encoding" value="utf-8" />
                <metacopy key="language" />
                <convertable>
                    <format...>
                </convertable>
                <viewers>
                </viewers>
            </outputtemplate>
          </then>
        </parametercondition>
    </output>
</profile>

<meta id="cardinality" operator="greaterthan">4</meta>

<meta id="lexicon" operator="fromparameter">lexicon</meta>



ParameterCondition(tok="yes", tok_isnot="no", disjunction=True, then=match, else=)

<parametercondition>
    <if>
        <equals parameter="tok">yes</equals>
        <notequals parameter="tok">yes</notequals>
    </if>
    <then>
        <outputtemplate>
        </outputtemplate>
    </then>
    <else>
        <parametercondition..> or <outputtemplate>
    </else>
</parametercondition>





<!-- Dutch lemmatiser sample -->
<profile unique="no" required="yes">
    <input>
        <inputtemplate format="Frog" mimetype="text/xml" label="Frog XML (pos-tagged, Dutch)">
            <!-- requirements -->
            <meta id="encoding">utf-8</meta>
            <meta id="pos">CGN</meta>
            <meta id="language">nld</meta>
            <convertable>
                <format...>
            </convertable>
        </inputtemplate>
    </input>
    <output>
        <outputtemplate format="Frog" mimetype="text/plain" label="Frog XML (lemmatised)" setextension=".tok" metacopy="yes">
            <!-- generated -->
            <meta id="lemma">yes</meta>
        </outputtemplate>
    </output>
</profile>




<metadata>
    <meta id="encoding">utf-8</meta>
    <meta id="pos">CGN</meta>
    <meta id="language">nld</meta>
</metadata>


metadata
    - mimetype
    - encoding
    - language
    - pos


inputtemplate:
    (annotationlevel)
    - metarequire
    - metaforbid
    - metachoice
outputtemplate:  (metacopy)
    - meta (set)
    - metaremove



<profile id="tokeniser" label="tokeniser" unique="no" required="no">
    <input>
        <format id="PlainTextFormat" mimetype="text/plain" label="Plain Text Tokeniser Input">
            <meta key="encoding" value="utf-8" />
            <meta key="language" value="nld" />
            <convertable>
                <format...>
            </convertable>
        </format>
    </input>
    <output when="">
        <format id="TokenizedTextFormat" mimetype="text/plain" label="Tokeniser Output" setextension=".tok">
            <meta key="encoding" value="utf-8" />
            <meta key="language" value="nld" />
            <convertable>
                <format...>
            </convertable>
            <viewers>
            </viewers>
        </format>
    </output>
    <parameters>
        ?
    </parameters>
</profile>

<profile id="lemmatiser" label="lemmatiser" unique="no" required="no">
    <input>
        <format id="PlainTextFormat" mimetype="text/plain" label="Plain Text Tokeniser Input">
            <meta key="encoding" value="utf-8" />
            <meta key="language" value="nld" />
            <convertable>
                <format...>
            </convertable>
        </format>
    </input>
    <output>
        <format id="TokenizedTextFormat" mimetype="text/plain" label="Tokeniser Output">
            <meta key="encoding" value="utf-8" />
            <meta key="language" value="nld" />
            <convertable>
                <format...>
            </convertable>
        </format>
    </output>
    <parameters>
        ?
    </parameters>
</profile>




Profile('Tokeniser',
    PlainTextFormat('Plain Text Tokeniser Input', encoding='utf-8',language='nld',setextension='$language.$encoding.txt',convertors=[ArchiveConvertor, WordConvertor,EncodingConvertor]),   #format, list of formats or formattemplate
    TokenizedTextFormat(encoding='utf-8',language='nld',byextension='$language.$encoding.tok', viewers=[]),  #format or list of formats
    unique=False,required=True
)


<profile label="Tokeniser">
    <format id="PlainTextFormat" mimetype="text/plain" label="Plain Text Tokeniser Input">
        <meta key="encoding" value="utf-8" />
        <meta key="language" value="nld" />
        <convertable>
            <format...>
        </convertable>
    </format>
</profile>


FormatTemplate(formatclass, ) #generates all combinations of languages and encodings. setextensions may contain variables











==

Profile(
    InputTemplate('maininput','Untokenised Text Input', FormatTemplate(PlainTextFormat, languages=['eng','nld','fra'], encodings=['utf-8','iso-8859-15']), setextension='$language.$encoding.txt') )

  
    OutputTemplate('tokoutput','Tokeniser output', Format(PlainTextFormat,
    paramcondition= 
)


MultiProfile(
    InputTemplate('maininput','Untokenised Text Input', FormatTemplate(PlainTextFormat, languages=['eng'], encodings=['utf-8']) ),
    OutputTemplate('tokoutput','Tokeniser output', FormatTemplate(PlainTextFormat, languages=['eng'], encodings=['utf-8'])
)



<inputtemplate id="maininput" label="Main input" min="2" max="9999">
    <formattemplate id="PlainTextFormat" label="Plain Text File" mimetype="text/plain" haslanguage="yes" hasencoding="yes" autoconvert="yes" scheme="(for XML)">
        <languages>
         <language label="English">eng</language>
        </languages>
        <encodings>
         <encoding>utf-8</encoding>
        </encodings>
    </formattemplate>
</inputtemplate>
<outputtemplate id="tokoutput" label="">
</outputtemplate>


<file type="maininput" encoding="utf-8" language="eng"></file>



Template(PlainTextFile, label="", languages="")

dfdfdfd
dfdfdf


Parameter limitations:



    Set for whole project, not per file



Profile:
    - describes relationship between a kind of input and output
        - input always the same regardless of parameters
            - All inputtemplates (of all profiles) will be available to the user
            - input may get certain meta fields from parameters though
        - output may differ completely based on parameters 


    - Different profiles are completely independent, *all* profiles that match the input *and* promise to deliver output are selected
    - Parameters are global and may be used by all profiles

    

    - metadata for input files generated on upload (through inputtemplate + user choices)
    - metadata for output files generated on start (through profiler -> profile -> outputtemplate)


profile multi
    input
        inputtemplate   text
        inputtemplate   dictionary  unique
    output
        outputtemplate  spellchecked-text




profile (join)
    input
        inputtemplate   textA
        inputtemplate   textB
    output
        outputtemplate  textA+B


profile (split)
    input
        inputtemplate   text
    output
        outputtemplate  textA
        outputtemplate  textB




    - Parameters may have an 




File Type: [ (inputtemplate label)              v]    #extra option: Upload CLAM MetaData file

Options: #meta choices (depending on above selection)
Encoding: utf-8   (non configurable)
Language: [                  v]




